{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "Example 1 parallel only.ipynb",
      "provenance": [],
      "collapsed_sections": [],
      "authorship_tag": "ABX9TyNFtfS79RmkTma9su1lMgbW",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/roie-fields/Generalized-Nash-Equilibrium-Solvers/blob/main/Stochastic%20Gradient%20Descent%20Solver%20-%20basic%20example%20(parallelized)\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "VUAJADJeiU6o",
        "outputId": "64a7b1ff-56de-42c3-81a6-bf26e1fb3dc2"
      },
      "source": [
        "!pip install xlsxwriter\n",
        "!pip install ortools"
      ],
      "execution_count": 1,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Collecting xlsxwriter\n",
            "  Downloading XlsxWriter-3.0.1-py3-none-any.whl (148 kB)\n",
            "\u001b[?25l\r\u001b[K     |██▏                             | 10 kB 24.8 MB/s eta 0:00:01\r\u001b[K     |████▍                           | 20 kB 27.9 MB/s eta 0:00:01\r\u001b[K     |██████▋                         | 30 kB 11.8 MB/s eta 0:00:01\r\u001b[K     |████████▉                       | 40 kB 9.1 MB/s eta 0:00:01\r\u001b[K     |███████████                     | 51 kB 5.1 MB/s eta 0:00:01\r\u001b[K     |█████████████▏                  | 61 kB 5.2 MB/s eta 0:00:01\r\u001b[K     |███████████████▍                | 71 kB 5.4 MB/s eta 0:00:01\r\u001b[K     |█████████████████▋              | 81 kB 6.1 MB/s eta 0:00:01\r\u001b[K     |███████████████████▉            | 92 kB 4.6 MB/s eta 0:00:01\r\u001b[K     |██████████████████████          | 102 kB 4.9 MB/s eta 0:00:01\r\u001b[K     |████████████████████████▎       | 112 kB 4.9 MB/s eta 0:00:01\r\u001b[K     |██████████████████████████▍     | 122 kB 4.9 MB/s eta 0:00:01\r\u001b[K     |████████████████████████████▋   | 133 kB 4.9 MB/s eta 0:00:01\r\u001b[K     |██████████████████████████████▉ | 143 kB 4.9 MB/s eta 0:00:01\r\u001b[K     |████████████████████████████████| 148 kB 4.9 MB/s \n",
            "\u001b[?25hInstalling collected packages: xlsxwriter\n",
            "Successfully installed xlsxwriter-3.0.1\n",
            "Collecting ortools\n",
            "  Downloading ortools-9.0.9048-cp37-cp37m-manylinux1_x86_64.whl (14.4 MB)\n",
            "\u001b[K     |████████████████████████████████| 14.4 MB 90 kB/s \n",
            "\u001b[?25hRequirement already satisfied: absl-py>=0.11 in /usr/local/lib/python3.7/dist-packages (from ortools) (0.12.0)\n",
            "Requirement already satisfied: protobuf>=3.15.8 in /usr/local/lib/python3.7/dist-packages (from ortools) (3.17.3)\n",
            "Requirement already satisfied: six in /usr/local/lib/python3.7/dist-packages (from absl-py>=0.11->ortools) (1.15.0)\n",
            "Installing collected packages: ortools\n",
            "Successfully installed ortools-9.0.9048\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ig6sMBgEMwAO",
        "outputId": "1709c0e8-eb57-4541-9b58-040bc4cc6c5a"
      },
      "source": [
        "pip install --upgrade jax jaxlib==0.1.69 -f https://storage.googleapis.com/jax-releases/jax_releases.html\n"
      ],
      "execution_count": 2,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Looking in links: https://storage.googleapis.com/jax-releases/jax_releases.html\n",
            "Requirement already satisfied: jax in /usr/local/lib/python3.7/dist-packages (0.2.19)\n",
            "Collecting jax\n",
            "  Downloading jax-0.2.20.tar.gz (745 kB)\n",
            "\u001b[K     |████████████████████████████████| 745 kB 4.9 MB/s \n",
            "\u001b[?25hCollecting jaxlib==0.1.69\n",
            "  Downloading https://storage.googleapis.com/jax-releases/cuda111/jaxlib-0.1.69%2Bcuda111-cp37-none-manylinux2010_x86_64.whl (196.5 MB)\n",
            "\u001b[K     |████████████████████████████████| 196.5 MB 39 kB/s \n",
            "\u001b[?25hRequirement already satisfied: scipy in /usr/local/lib/python3.7/dist-packages (from jaxlib==0.1.69) (1.4.1)\n",
            "Requirement already satisfied: numpy>=1.17 in /usr/local/lib/python3.7/dist-packages (from jaxlib==0.1.69) (1.19.5)\n",
            "Requirement already satisfied: flatbuffers<3.0,>=1.12 in /usr/local/lib/python3.7/dist-packages (from jaxlib==0.1.69) (1.12)\n",
            "Requirement already satisfied: absl-py in /usr/local/lib/python3.7/dist-packages (from jaxlib==0.1.69) (0.12.0)\n",
            "Requirement already satisfied: opt_einsum in /usr/local/lib/python3.7/dist-packages (from jax) (3.3.0)\n",
            "Requirement already satisfied: six in /usr/local/lib/python3.7/dist-packages (from absl-py->jaxlib==0.1.69) (1.15.0)\n",
            "Building wheels for collected packages: jax\n",
            "  Building wheel for jax (setup.py) ... \u001b[?25l\u001b[?25hdone\n",
            "  Created wheel for jax: filename=jax-0.2.20-py3-none-any.whl size=854828 sha256=621ad90ef5b542e1235e23ed36731cafbcbf702147235777887825c77de0ce39\n",
            "  Stored in directory: /root/.cache/pip/wheels/d7/d6/6e/370b9c3dbee6863e8ad989b9f0ace88bd0d73843cf32243715\n",
            "Successfully built jax\n",
            "Installing collected packages: jaxlib, jax\n",
            "  Attempting uninstall: jaxlib\n",
            "    Found existing installation: jaxlib 0.1.70+cuda111\n",
            "    Uninstalling jaxlib-0.1.70+cuda111:\n",
            "      Successfully uninstalled jaxlib-0.1.70+cuda111\n",
            "  Attempting uninstall: jax\n",
            "    Found existing installation: jax 0.2.19\n",
            "    Uninstalling jax-0.2.19:\n",
            "      Successfully uninstalled jax-0.2.19\n",
            "Successfully installed jax-0.2.20 jaxlib-0.1.69+cuda111\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ZJQmhsy3idcb",
        "outputId": "8fd36165-ec8b-40f4-aa67-59e13e21c8c6"
      },
      "source": [
        "import jax.numpy as jnp\n",
        "import numpy as np\n",
        "from jax import random\n",
        "import jax as jx\n",
        "from jax.ops import index, index_update\n",
        "\n",
        "\n",
        "import pandas as pd\n",
        "import scipy as sp\n",
        "import jax.scipy as jsp\n",
        "import math\n",
        "import matplotlib as mpl\n",
        "import statsmodels.api as sm\n",
        "from sklearn import linear_model\n",
        "import time\n",
        "import xlsxwriter\n",
        "\n",
        "from jax.scipy import optimize\n",
        "from ortools.linear_solver import pywraplp\n",
        "\n",
        "from sklearn.linear_model import LinearRegression\n",
        "from scipy.optimize import Bounds\n",
        "\n",
        "%matplotlib inline\n",
        "import matplotlib.pyplot as plt\n",
        "plt.style.use('seaborn-whitegrid')"
      ],
      "execution_count": 3,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.7/dist-packages/statsmodels/tools/_testing.py:19: FutureWarning: pandas.util.testing is deprecated. Use the functions in the public API at pandas.testing instead.\n",
            "  import pandas.util.testing as tm\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "hYAil8iTzAVk"
      },
      "source": [
        "# 0. Initialize"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "7Q2iJU-Vy_pg",
        "outputId": "03a73719-46cd-45a3-aa5b-b4f93d809c1b"
      },
      "source": [
        "numParents = 3\n",
        "numChildren = 5\n",
        "\n",
        "def make_key():\n",
        "  seed = np.random.randint(2**16 - 1)\n",
        "  return random.PRNGKey(seed)\n",
        "\n",
        "key = make_key()\n",
        "key, subkey = random.split(key)\n",
        "\n",
        "xPoints = random.uniform(key, shape=(numParents,))\n",
        "yPoints = random.uniform(subkey, shape=(numParents,))\n",
        "print(xPoints)\n",
        "print(yPoints)\n"
      ],
      "execution_count": 4,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "WARNING:absl:No GPU/TPU found, falling back to CPU. (Set TF_CPP_MIN_LOG_LEVEL=0 and rerun for more info.)\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[0.6761223  0.07896769 0.84939384]\n",
            "[0.41059077 0.17795694 0.7522336 ]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "ah-9Hh4oWxWb"
      },
      "source": [
        "#Prep Optimizer"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "s3T-NO2icFxh"
      },
      "source": [
        "def goldenVecSearch(lowB, upB, f):\n",
        "  R = (5**0.5 - 1) / 2\n",
        "  D = R * (upB - lowB)\n",
        "  x1 = lowB + D\n",
        "  x2 = upB - D\n",
        "  f1 = f(x1)\n",
        "  f2 = f(x2)\n",
        "  \n",
        "  for i  in range(50):\n",
        "  #while max(abs(f1-f2)) > 0.0001:\n",
        "    f1Lower = (f1 < f2)*1\n",
        "    f2Lower = (f2 <= f1)*1\n",
        "    \n",
        "    lowB = x2*f1Lower + lowB*f2Lower\n",
        "    x2 = x1* f1Lower + x2*f2Lower\n",
        "    f2 = f1*f1Lower + f2*f2Lower\n",
        "    x1 = (lowB + R*(upB-lowB))*f1Lower + x1*f2Lower\n",
        "    f1 = f(x1)*f1Lower + f1*f2Lower\n",
        "\n",
        "    upB = x1*f2Lower + upB*f1Lower\n",
        "    x1 = x2*f2Lower + x1*f1Lower\n",
        "    f1 = f2*f2Lower + f1*f1Lower\n",
        "    x2 = (upB - R*(upB-lowB))*f2Lower + x2*f1Lower\n",
        "    f2 = f(x2)*f2Lower + f2*f1Lower\n",
        "\n",
        "  f1Lower = (f1 < f2)*1\n",
        "  f2Lower = (f2 <= f1)*1\n",
        "  xOpt = x1*f1Lower + x2*f2Lower\n",
        "  print(iter)\n",
        "\n",
        "  return xOpt"
      ],
      "execution_count": 5,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "uNTspn0izxgt"
      },
      "source": [
        "## New optimizers\n"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "GmBM09kWrI-O"
      },
      "source": [
        "xMinGConstr = 0\n",
        "xMaxGConstr = 1\n",
        "\n",
        "yMinGConstr = 0\n",
        "yMaxGConstr = 1\n",
        "\n",
        "def findMaxX(y):\n",
        "  maxX = abs(1-y) \n",
        "  return maxX\n",
        "\n",
        "def findMaxY(x):\n",
        "  maxY = abs(1-x) \n",
        "  return maxY\n",
        "\n",
        "def optimizeX(y, numChildren):\n",
        "\n",
        "  upperLim = findMaxX(y)\n",
        "  lowerLim = np.zeros((numChildren, numParents))\n",
        "\n",
        "  def funcx(x):\n",
        "    return (x-1)**2\n",
        "\n",
        "  myOpt = goldenVecSearch(lowerLim, upperLim, funcx)\n",
        "\n",
        "  return myOpt\n",
        "\n",
        "def optimizeY(x, numChildren):\n",
        "\n",
        "  upperLim = findMaxY(x)\n",
        "  lowerLim = np.zeros((numChildren, numParents))\n",
        "\n",
        "  def funcy(y):\n",
        "    return (y-0.5)**2\n",
        "\n",
        "  myOpt = goldenVecSearch(lowerLim, upperLim, funcy)\n",
        "\n",
        "  return myOpt"
      ],
      "execution_count": 6,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "UUoG7R-9vzaC"
      },
      "source": [
        "def childrenGenerate(pointVec, genCount:int, stepSize:float, delta) -> float: #pointVec = Parent vector. genCount = current generation number. stepSize = max distance from parent each child\n",
        "  key = make_key()\n",
        "  trueStepSize = stepSize*(delta**genCount)\n",
        "  steps = random.uniform(key, shape=(numChildren,numParents))*trueStepSize*2\n",
        "  steps = steps - trueStepSize\n",
        "  return steps+pointVec\n",
        "\n"
      ],
      "execution_count": 7,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "JmrqzxEO9EWN"
      },
      "source": [
        "def findChildPenalty (xChildren, yChildren, xShadow, yShadow):\n",
        "  return jnp.sqrt((xChildren - xShadow)**2 + (yChildren - yShadow)**2)\n"
      ],
      "execution_count": 8,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "Q9sxg7ADCoaM"
      },
      "source": [
        "def findParentPenalty(xPoints, yPoints):\n",
        "  xShad = optimizeX(yPoints, 1)\n",
        "  yShad = optimizeY(xPoints, 1)\n",
        "\n",
        "  return jnp.sqrt((xPoints - xShad)**2 + (yPoints - yShad)**2)"
      ],
      "execution_count": 9,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "e6vZ01pEDS5f",
        "outputId": "424103d3-54b9-4e4a-f181-94638bac8c1b"
      },
      "source": [
        "x = np.array([1, 0.5, 0.5])\n",
        "y = np.array([0, 0.5, 0.8])\n",
        "findParentPenalty(x,y)\n",
        "\n",
        "a = np.array([[1, 2, 3],\n",
        "         [4, 5, 6]])\n",
        "a.sum(axis = 0)"
      ],
      "execution_count": 10,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "<built-in function iter>\n",
            "<built-in function iter>\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([5, 7, 9])"
            ]
          },
          "metadata": {},
          "execution_count": 10
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "TI61daRcAD0C"
      },
      "source": [
        "def nextGen(children, parents, childFit, parentFit):\n",
        "  steps = children - parents\n",
        "  fitChange = parentFit - childFit\n",
        "  weightedSteps = steps*fitChange\n",
        "  nextStep = (1/numChildren) * weightedSteps.sum(axis=0)\n",
        "  return parents + nextStep\n",
        "  "
      ],
      "execution_count": 11,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "GUL7XSPCRnmM"
      },
      "source": [
        "#The full algorithm in action"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "OkYgflh92OzQ"
      },
      "source": [
        "intMax = 1000\n",
        "\n",
        "numParents = 10000\n",
        "numChildren = 25\n",
        "stepSize = 0.1\n",
        "delta = 0.993\n",
        "\n",
        "t0 = time.time()\n",
        "\n",
        "key = make_key()\n",
        "key, subkey = random.split(key)\n",
        "\n",
        "#Generate Initial Points\n",
        "xParents = random.uniform(key, shape=(numParents,))\n",
        "yParents = random.uniform(subkey, shape=(numParents,))\n",
        "\n",
        "xChildren = np.ones((numParents, numChildren))\n",
        "yChildren = np.ones((numParents, numChildren))\n",
        "childFit = np.ones((numParents, numChildren))\n",
        "\n",
        "for i in range(intMax):\n",
        "  #1. Generate Children\n",
        "  xChildren = childrenGenerate(xParents, i, stepSize, delta)\n",
        "  yChildren = childrenGenerate(yParents, i, stepSize, delta)\n",
        "\n",
        "  #2. Find fitness of children\n",
        "    #find shadow points for children\n",
        "  xShadow = optimizeX(yChildren, numChildren)\n",
        "  yShadow = optimizeY(xChildren, numChildren)\n",
        "\n",
        "    #calculate fitness\n",
        "  childFit = findChildPenalty(xChildren, yChildren, xShadow, yShadow)\n",
        "  parentFit = findParentPenalty(xParents, yParents)\n",
        "\n",
        "  #3. Update next Generation as weighted average of children\n",
        "  xParents = nextGen(xChildren, xParents, childFit, parentFit)\n",
        "  yParents = nextGen(yChildren, yParents, childFit, parentFit)\n",
        "\n",
        "  iterationTime = time.time() - t0\n",
        "  print(\"this is iteration \", i, \"and took\", iterationTime, \" seconds\")\n",
        "  if (jnp.mean(parentFit)<0.01):\n",
        "    break\n",
        "\n",
        "totalTime = time.time() - t0\n",
        "print(xParents, yParents)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "nRDeJHcclL_2"
      },
      "source": [
        "myFitness = findParentPenalty(xParents, yParents)\n",
        "np.mean(myFitness)\n",
        "goodPoints = (myFitness < 0.01)\n",
        "\n",
        "xPlotted = xParents*goodPoints\n",
        "yPlotted = yParents*goodPoints"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "mRPtyskBG60o",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 284
        },
        "outputId": "20c3a71d-6174-4893-e9ef-f5251ab17dfb"
      },
      "source": [
        "plt.plot(xPlotted, yPlotted, '.', color='black')\n",
        "plt.xlim(0,1)\n",
        "plt.ylim(0,1)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(0.0, 1.0)"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 24
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": []
          }
        }
      ]
    }
  ]
}